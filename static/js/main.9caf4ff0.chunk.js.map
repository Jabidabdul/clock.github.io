{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","time","setTime","back","setBack","even","backgroundColor","color","height","width","odd","useEffect","interval","setInterval","hour","Date","getHours","minutes","getMinutes","seconds","getSeconds","tempSec","clearInterval","style","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAGe,SAASA,IAEtB,MAAsBC,IAAMC,SAAS,IAArC,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAsBH,IAAMC,SAAS,IAArC,mBAAKG,EAAL,KAAWC,EAAX,KACIC,EAAO,CACTC,gBAAiB,QACjBC,MAAO,QACPC,OAAQ,QACRC,MAAO,QAELC,EAAM,CACRJ,gBAAiB,QACjBC,MAAO,QACPC,OAAQ,QACRC,MAAO,QA0CT,OAxCAV,IAAMY,WAAU,WACd,IAAIC,EAAWC,aAAY,WACzB,IAAIC,GAAO,IAAIC,MAAOC,WAClBC,GAAU,IAAIF,MAAOG,aACrBC,GAAU,IAAIJ,MAAOK,aACrBC,EAAUF,EA8Bd,OA5BIA,EAAU,KACZA,EAAU,IAAMA,GAEdF,EAAU,KACZA,EAAU,IAAMA,GAEdH,EAAO,KACTA,EAAO,IAAMA,GAMbZ,EAJEY,EAAO,IACTA,GAAc,IAGC,IAAMG,EAAU,IAAME,EAA7BL,MAIAA,EAAO,IAAMG,EAAU,IAAME,EAA7BL,OAMRV,EAFEiB,EAAU,IAAM,EAEVhB,EAEGK,GAGN,WACLY,cAAcV,MAEf,QAGH,qBAAKW,MAAOpB,EAAMqB,UAAU,YAA5B,SACE,sBAAKA,UAAU,QAAf,UACE,uCACA,6BAAKvB,SC/Db,IAYewB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9caf4ff0.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nexport default function App() {\n\n  let [time, setTime] = React.useState('');\n  let [back, setBack] = React.useState({});\n  let even = {\n    backgroundColor: \"black\",\n    color: 'white',\n    height: \"100vh\",\n    width: \"100%\"\n  };\n  let odd = {\n    backgroundColor: \"white\",\n    color: 'black',\n    height: \"100vh\",\n    width: \"100%\"\n  };\n  React.useEffect(() => {\n    let interval = setInterval(() => {\n      let hour = new Date().getHours();\n      let minutes = new Date().getMinutes();\n      let seconds = new Date().getSeconds();\n      let tempSec = seconds;\n      //let tempHour = hour;\n      if (seconds < 10) {\n        seconds = \"0\" + seconds;\n      }\n      if (minutes < 10) {\n        minutes = \"0\" + minutes;\n      }\n      if (hour < 10) {\n        hour = \"0\" + hour;\n      }\n      if (hour > 12) {\n        hour = hour - 12;\n\n        // seconds = seconds + \" \" + \"PM\";\n        setTime(hour + \":\" + minutes + \":\" + seconds + \" \" + \"PM\");\n      }\n      else {\n\n        setTime(hour + \":\" + minutes + \":\" + seconds + \" \" + \"AM\");\n      }\n\n\n      if (tempSec % 2 === 0) {\n        // console.log(back)\n        setBack(even);\n      }\n      else setBack(odd)\n\n\n      return () => {\n        clearInterval(interval);\n      }\n    }, 1000);\n  })\n  return (\n    <div style={back} className=\"container\">\n      <div className=\"clock\">\n        <h1>Clock</h1>\n        <h1>{time}</h1>\n      </div>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}